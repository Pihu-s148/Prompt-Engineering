# -*- coding: utf-8 -*-
"""Prompt_engineering_Part_1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RNCUB3eB0rXEgO_TKitpJxgMxb8_LF9x

# Prompt Engineering: Setting Up Work Environment

1. Introduction
This script demonstrates various techniques in prompt engineering to effectively interact with language models like OpenAI's GPT-4. It covers setting up the environment, writing clear instructions, using delimiters, role assignments, structured outputs, and condition checks.

## Step 2. Setting Up Work Environment

### 2.1 Installing & Importing Necessary Libraries
- **Purpose**: Import the OpenAI library to interact with the GPT-4 model.
"""

!pip install httpx==0.23.0

!pip install openai

"""
### 2.2 Setting Up API Key
Set up the API key for authentication. Replace `'your-api-key'` with your actual OpenAI API key."""

import openai
openai.api_key = "your-api-key"

"""## 3. Prompt Engineering Techniques

### 3.1 Write Clear and Specific Instructions
Demonstrates how to provide clear and specific instructions to the model. The example translates a given English sentence into French.
"""

def clear_instruction_example():
    prompt = "Translate the following text to French: \n'The weather today is sunny with a slight breeze.'"
    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt}
        ]
    )
    print("Response: ", response.choices[0].message.content.strip())

clear_instruction_example()

"""
### 3.2 Use Delimiters to Indicate Distinct Parts of the Input
Shows how to use delimiters (triple quotes) to clearly separate sections of input, reducing ambiguity. The example summarizes a text in one sentence."""

def use_delimiters_example():
    prompt = (
        "Summarize the text below in one sentence: \n""""\nMachine learning is a subset of artificial intelligence that focuses on building systems capable of learning from data and making predictions or decisions without being explicitly programmed.\n"""
    )
    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt}
        ]
    )
    print("Response: ", response.choices[0].message.content.strip())

use_delimiters_example()

"""
### 3.3 Use of Separators, Formatting, and Role Assignments
Illustrates structuring prompts with clear separators and role assignments to enhance understanding. The example provides an overview of the Python programming language."""

def role_assignment_example():
    prompt = """\
                  Role: Assistant
                  Task: Provide a brief overview of the Python programming language.
                  Input:
                  Python is a versatile programming language known for its simplicity and readability. It is widely used in web development, data science, machine learning, and automation.
                  """
    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are a helpful assistant who summarizes content."},
            {"role": "user", "content": prompt}
        ]
    )
    print("Response: ", response.choices[0].message.content.strip())

role_assignment_example()

"""
### 3.4 Ask for a Structured Output
Requests output in a specific format to ensure consistency and clarity. The example formats details of a book into a structured output."""

def structured_output_example():
    prompt = """\
                  Provide the details of the book in the following format:
                  Title:
                  Author:
                  Year Published:
                  Summary:
                  The Great Gatsby is a novel by F. Scott Fitzgerald, published in 1925. It explores themes of wealth, class, and the American Dream.
"""
    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt}
        ]
    )
    print("Response: ", response.choices[0].message.content.strip())

structured_output_example()

"""
### 3.5 Ask the Model to Check Whether Conditions Are Satisfied
Adds conditions and requests verification to ensure accurate responses. The example checks if a text mentions a programming language and its application."""

def check_conditions_example():
    prompt = (
        "Check if the following conditions are met in the text:\nConditions:\n1. The text mentions a programming language.\n2. The text specifies at least one application of the language.\nText: \nPython is a programming language used for web development and data science."
    )
    response = openai.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You are a helpful assistant."},
            {"role": "user", "content": prompt}
        ]
    )
    print("Response: ", response.choices[0].message.content.strip())

check_conditions_example()